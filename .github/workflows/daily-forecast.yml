name: Daily BTC Forecast

on:
  schedule:
    - cron: "10 0 * * *"     # 00:10 UTC daily (08:10 Manila)
  workflow_dispatch: {}

jobs:
  run-forecast:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    concurrency:
      group: btc-forecast
      cancel-in-progress: false

    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Install system Graphviz (only if you use plot_model)
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt

      - name: Verify files are present
        run: |
          ls -la
          ls -la data || true

      - name: Execute notebook with papermill
        run: |
          mkdir -p out
          papermill "single_layer.ipynb" out/output.ipynb

      - name: Show forecast in logs
        run: |
          python - <<'PY'
import json
with open("out/daily_forecast.json") as f:
    d = json.load(f)
print(f"Next-day forecast close: {float(d['forecast_close']):.2f}")
m = d.get("metrics_h1", {})
order = ["RMSE","MSE","MAE","MAPE","sMAPE","RÂ²","Explained Variance","Gamma Deviance","Poisson Deviance"]
for k in order:
    if k in m:
        v = float(m[k])
        if k in ("MAPE","sMAPE"): print(f"{k}: {100*v:.2f}%")
        elif k == "RÂ²":           print(f"{k}: {v:.3f}")
        else:                     print(f"{k}: {v:.2f}")
PY

      - name: Add pretty summary
        run: |
          python - <<'PY'
import json, os
d = json.load(open("out/daily_forecast.json"))
summ = f"""## ðŸ“ˆ Daily BTC Forecast

**Run (UTC):** {d['run_ts_utc']}  
**Target Close (UTC date):** {d['target_close_date_utc']}  
**Forecast Close:** **{float(d['forecast_close']):.2f}**

### Metrics (next-day)
"""
m = d.get("metrics_h1", {})
if m:
    summ += "| Metric | Value |\n|--|--|\n"
    for k,v in m.items():
        v = float(v)
        if k in ("MAPE","sMAPE"): val = f"{100*v:.2f}%"
        elif k == "RÂ²":           val = f"{v:.3f}"
        else:                     val = f"{v:.2f}"
        summ += f"| {k} | {val} |\n"
open(os.environ["GITHUB_STEP_SUMMARY"], "a").write(summ)
PY

      - name: Commit outputs (JSON/CSV)
        uses: EndBug/add-and-commit@v9
        with:
          add: |
            out/daily_forecast.json
            out/history.csv
          message: "chore: update daily forecast artifacts [skip ci]"
          default_author: github_actions

      - name: Upload artifacts (backup)
        uses: actions/upload-artifact@v4
        with:
          name: daily-forecast
          path: |
            out/daily_forecast.json
            out/history.csv
            out/output.ipynb
            out/*.png
            out/*.html

      - name: Notify Telegram
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          python notify_telegram.py
